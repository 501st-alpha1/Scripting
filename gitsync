#!/bin/bash
# Helper script to sync files via git
# Copyright (C) 2014-2015 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

validArgs=("names" "paths")
source loadconf "$HOME/.scott_script/gitsync" "config" validArgs[@]

if [ -z "$1" ]
then
  echo "usage: `basename $0` <name> [<time> [commit-only|<remote>]]"
  echo
  echo "Arguments:"
  echo "  <name>: The name of the repo to sync, defined in config file."
  echo "  <time>: Amount of delay between syncs in seconds. Default 60."
  echo "  commit-only|<remote>:"
  echo "    commit-only: Don't sync to any remotes."
  echo "    <remote>: The remote to sync to. Default 'origin'."
  exit 1
fi

for (( i=0; i < "${#names[@]}"; i++ ))
do
  if [ "${names[$i]}" == "$1" ]
  then
    path="${paths[$i]}"
    name="${names[$i]}"
  fi
done

if [ -z "$name" ]
then
  echo "There is no repo called \"$1\"!"
  exit 2
fi

if [ ! -d "$path" ]
then
  echo "The repo \"$1\" (located at \"$path\") does not exist!"
  exit 3
fi

if [ "$3" == "" ]
then
  remote="origin"
else
  remote="$3"
fi

cd "$path"

while true
do
  git commit -a -m "auto-commit at `date` on `hostname`"

  if [ "$3" != "commit-only" ]
  then
    git remote update "$remote"

    if [ "$?" -eq 0 ]
    then
      #FIXME: this part doesn't work with custom remote name
      localCommit=`git rev-parse @`
      remoteCommit=`git rev-parse @{u}`
      base=`git merge-base @ @{u}`

      if [ "$localCommit" == "$remoteCommit" ]
      then
        echo "Up-to-date"
      elif [ "$localCommit" == "$base" ]
      then
        git pull "$remote" master
      elif [ "$remoteCommit" == "$base" ]
      then
        git push "$remote" master
      else
        echo "Local and remote have diverged. Attempting automatic resolution."
        git pull "$remote" master
        if [ "$?" -eq 0 ]
        then
          echo "Successfully resolved."
          git push "$remote" master
        else
          echo -e "\a"
          break;
        fi
      fi
    else
      echo "Network error, trying again next time."
    fi
  fi

  if [ "$2" == "" ]
  then
    sleep 60
  else
    sleep "$2"
  fi
done
