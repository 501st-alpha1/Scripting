#!/bin/bash
# Helper script to sync files via git
# Copyright (C) 2014-2015 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

validArgs=("names" "paths")
source loadconf "$HOME/.scott_script/gitsync" "config" validArgs[@]

if [ -z "$1" ]
then
  echo "Please specify what repo to sync."
  exit 1
fi

for (( i=0; i < "${#names[@]}"; i++ ))
do
  if [ "${names[$i]}" == "$1" ]
  then
    path="${paths[$i]}"
    name="${names[$i]}"
  fi
done

if [ -z "$name" ]
then
  echo "There is no repo called \"$1\"!"
  exit 2
fi

if [ ! -d "$path" ]
then
  echo "The repo \"$1\" (located at \"$path\") does not exist!"
  exit 3
fi

cd "$path"

while true
do
  git commit -a -m "auto-commit at `date`"

  if [ "$1" != "commit-only" ]
  then
    git remote update

    if [ "$?" -eq 0 ]
    then
      localCommit=`git rev-parse @`
      remoteCommit=`git rev-parse @{u}`
      base=`git merge-base @ @{u}`

      if [ "$localCommit" == "$remoteCommit" ]
      then
        echo "Up-to-date"
      elif [ "$localCommit" == "$base" ]
      then
        git pull
      elif [ "$remoteCommit" == "$base" ]
      then
        git push
      else
        echo "Local and remote have diverged. Attempting automatic resolution."
        git pull
        if [ "$?" -eq 0 ]
        then
          echo "Successfully resolved."
          git push
        else
          echo -e "\a"
          break;
        fi
      fi
    else
      echo "Network error, trying again next time."
    fi
  fi

  if [ "$2" == "" ]
  then
    sleep 60
  else
    sleep "$2"
  fi
done
