#!/bin/bash
# Helper script to parse XML files.
# Copyright (C) 2013 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Usage: source parsexml <folder> <file>
# <folder> is the folder where the XML file is stored.
# <file> is the name of the XML file.
# Note that the script *must* be called using the source command.

# Also sets "parents" array, which contains the names of all tags that have
# sub-tags.

parsexml_configfolder=$1
parsexml_configfile=$2
parsexml_file=$parsexml_configfolder/$parsexml_configfile
parents=()

if [ "$3" != "" ]
then
  declare -a parsexml_validArgs=("${!3}")
else
  parsexml_validArgs=""
fi

if [ ! -f "$parsexml_file" ]
then
  echo "File \"$parsexml_file\" doesn't exist!"
  return 1
fi

echo "Loading XML file at $parsexml_file" > /dev/null

function read_dom() {
  oifs=$IFS
  IFS=\>
  read -d \< entity content
  IFS=$oifs
}

while read_dom
do
  content=`echo "$content" | xargs`
  echo "$entity : $content" > /dev/null
  if [ "$entity" == "" ] && [ "$content" == "" ]
  then
    continue
  elif [ "$entity" == "xml" ]
  then
    continue
  elif [ "$entity" == "/xml" ]
  then
    break
  elif [ "${entity:0:3}" == "!--" ]
  then
    # Skip comments
    continue
  elif [ "$content" == "" ] && [ "$entity" != "" ]
  then
    # Closing tags.
    if [ "${entity:0:1}" == "/" ]
    then
      if [ "$current" == "${entity:1}" ]
      then
        current=""
      elif [ "$parent" == "${entity:1}" ]
      then
        parent=""
      else
        echo "Error! Mismatched closing tag!"
        return 2
      fi
    else
      if [ "$parent" == "" ]
      then
        parent=$entity
        parents+=("$entity")
      else
        echo "Error! No nesting!"
        return 3
      fi
    fi
  elif [ "$current" == "" ]
  then
    if [ "$parent" != "" ]
    then
      var="${parent}_$entity"
      eval "$var=\"$content\""
      current=$entity
    else
      eval "$entity=\"$content\""
      current=$entity
    fi
  else
    echo "Error! Shouldn't reach here!"
    return 4
  fi
done < $parsexml_file

unset content current entity parent parsexml_file parsexml_configfolder parsexml_configfile var

return 0

