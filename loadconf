#!/bin/bash
# Usage: source loadconf <folder> <file> <validArgs>
# <folder> is the folder where the config file is stored.
# <file> is the name of the config file.
# <validArgs> is an array of allowed variable names. If none are given, all
# names are allowed. If the array is called "arr", pass it as "arr[@]".
# Note that the script *must* be called using the source command.
configfolder=$1
configfile=$2
file=$configfolder/$configfile
if [ "$3" != "" ]
then
  declare -a validArgs=("${!3}")
else
  validArgs=""
fi

# Check if array contains an element.
# $1 is the element to check for.
# $2 is the array.
function containsElement () {
  local e
  for e in "${@:2}"
  do [[ "$e" == "$1" ]] && return 0
  done
  return 1
}

if [ ! -f "$file" ]
then
  echo "File doesn't exist!"
  return 1
fi

echo "Loading config file at $file"

for line in `cat $file`
#while read -r -u $file var val extra
do
  oifs=$IFS
  IFS='='
  read -a arr <<< "$line"
  arrlen="${#arr[*]}"
  
  var="${arr[0]}"
  val="${arr[1]}"
  extra="${arr[2]}"
  
  if [ "$var" == "" ]
  #if [ $arrlen -eq "0" ]
  then
    echo "Skipping blank line."
  elif [ "$val" == "" ]
  #elif [ $arrlen -eq "1" ]
  then
    echo "Skipping fail line."
  elif [ "$extra" != "" ]
  #elif [ $arrlen -gt "2" ]
  then
    echo "More than one = on that line! Hax!"
  else
    if [ "$validArgs" == "" ]
    then
      eval "$var=$val"
    else
      $(containsElement $var "${validArgs[@]}")
      if [ $? -eq "0" ]
      then
        $var="$val"
      else
        echo "Variable \"$var\" is not allowed, skipping."
      fi
    fi
  fi
  IFS=$oifs
done

return 0
