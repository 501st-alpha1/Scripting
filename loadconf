#!/bin/bash
# Helper script to load config files.
# Copyright (C) 2013-2014 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Usage: source loadconf <folder> <file> [validArgs]
# <folder> is the folder where the config file is stored.
# <file> is the name of the config file.
# [validArgs] is an array of allowed variable names. If none are given, all
# names are allowed. If the array is called "arr", pass it as "arr[@]".
# Note that the script *must* be called using the source command.
loadconf_configfolder=$1
loadconf_configfile=$2
loadconf_file=$loadconf_configfolder/$loadconf_configfile
if [ "$3" != "" ]
then
  declare -a loadconf_validArgs=("${!3}")
else
  loadconf_validArgs=""
fi

# Check if array contains an element.
# $1 is the element to check for.
# $2 is the array.
function containsElement () {
  local e
  for e in "${@:2}"
  do [[ "$e" == "$1" ]] && return 0
  done
  return 1
}

if [ ! -f "$loadconf_file" ]
then
  echo "File doesn't exist!"
  return 1
fi

echo "Loading config file at $loadconf_file" > /dev/null

while read -r loadconf_line
do
  # Skip comments.
  if [ "${loadconf_line:0:1}" == "#" ]
  then
    continue
  fi
  
  oifs=$IFS
  IFS='='
  read -a loadconf_arr <<< "$loadconf_line"
  IFS=$oifs
  
  loadconf_var="${loadconf_arr[0]}"
  loadconf_val="${loadconf_arr[1]}"
  loadconf_extra="${loadconf_arr[2]}"
  
  if [ "$loadconf_var" == "" ]
  then
    echo "Skipping blank line." > /dev/null
  elif [ "$loadconf_val" == "" ]
  then
    echo "Skipping fail line." > /dev/null
  elif [ "$loadconf_extra" != "" ]
  then
    echo "More than one = on that line! Hax!" #> /dev/null
  else
    if [ "$loadconf_validArgs" == "" ]
    then
      eval "$loadconf_var=$loadconf_val"
    else
      $(containsElement $loadconf_var "${loadconf_validArgs[@]}")
      if [ $? -eq "0" ]
      then
        eval "$loadconf_var=$loadconf_val"
      else
        echo "Variable \"$loadconf_var\" is not allowed, skipping." #> /dev/null
      fi
    fi
  fi
done < $loadconf_file

return 0
