#!/bin/bash
# Helper script to transfer setup to new system.
# Copyright (C) 2013-2015 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

################################################################################
#                                    Usage                                     #
################################################################################

function usage() {
  echo "usage: $0 [arguments]"
  echo
  echo "This script is to automate some common things needed in setting up"
  echo "a new GNU/Linux system. It is designed such that it should be safe"
  echo "to run again. That is, checks are built in to see that nothing is"
  echo "clobbered."
  echo
  echo "Possible arguments:"
  echo "  -h  --help          Display this help text."
  echo "      --no-bashrc     Disable linking of bashrc."
  echo "      --no-emacs      Disable Emacs initialization."
  echo "      --no-caps       Disable swapping of Caps Lock with Right Control."
  echo "      --no-git        Disable Git configuration"
  echo "      --no-backlight  Disable backlight fix."
  echo "      --name <name>   Your full name. (Used for Git config.)"
  echo "      --email <email> Your email address. (Used for Git config.)"
  exit 1
}

################################################################################
#                             Argument Parsing                                 #
################################################################################
if [ $# -eq 0 ]
then
  echo "No arguments passed. Running everything."
else
  while [ $# -gt 0 ]
  do
    case "$1" in
      "--help")
        usage
        ;;
      "-h")
        usage
        ;;
      "--no-bashrc")
        nobashrc=1
        ;;
      "--no-emacs")
        noemacs=1
        ;;
      "--no-caps")
        nocaps=1
        ;;
      "--no-git")
        nogit=1
        ;;
      "--no-backlight")
        nobacklight=1
        ;;
      "--name")
        shift
        name="$1"
        ;;
      "--email")
        shift
        email="$1"
        ;;
      *)
        echo "Error: unrecognized argument."
        usage
        ;;
    esac
    shift
  done
fi

path=`pwd`
read -p "Detected path to this repo as $path. Is this correct? [Y/n] " response
if [ ! -z "$response" ] && [ "$response" != "Y" ] && [ "$response" != "y" ]
then
    echo "Failed to auto-detect path. Exiting."
    exit 1
fi

################################################################################
#                              Bashrc Linkage                                  #
################################################################################
function linkBashrc() {
  bashrc="$HOME/.bashrc"

  output="
################################################################################
#                                                                              #
#                     Custom Stuff via Scott's Scripts                         #
#                                                                              #
################################################################################

. $path/bashrc"

  echo "Bashrc:"

  if [ -f "$bashrc" ]
  then
    check=`cat "$bashrc" | grep "Custom Stuff via Scott's Scripts"`

    if [ -n "$check" ]
    then
      echo "  The bashrc has already been linked on this system! Skipping.."
    else
      echo "$output" >> "$bashrc"
      echo "  Bashrc has been linked."
    fi
  else
    echo "  User's bashrc file (\"$bashrc\") does not exist! Skipping.."
  fi

  unset bashrc output check
}

if [ "$nobashrc" == "1" ]
then
  echo "Skipping bashrc linking at user's request."
else
  linkBashrc
fi

################################################################################
#                                     Emacs                                    #
################################################################################
function setupEmacs() {
  read -p "Enter the path to the Emacs appdata folder: " response
  if [ ! -d "$response" ]
  then
    echo "Path doesn't exist! Skipping..."
  else
    cd "$response"
    if [ ! -d "emacs-init" ]
    then
      git clone ssh://git@github.com/501st-alpha1/emacs-init
    fi
  fi
}

if [ "$noemacs" == "1" ]
then
  echo "Skipping Emacs linkage at user's request."
else
  setupEmacs
fi

################################################################################
#                            Caps Lock <--> Control                            #
################################################################################
function swapCaps() {
  echo "Swapping the Caps Lock and (Right) Control keys."

  echo "! Swap Caps Lock and Control

remove Lock = Caps_Lock
remove Control = Control_R
keysym Control_R = Caps_Lock
keysym Caps_Lock = Control_R
add Lock = Caps_Lock
add Control = Control_R
" > $HOME/.xmodmap
}

if [ "$nocaps" == "1" ]
then
  echo "Skipping Caps Lock swapping at user's request."
else
  swapCaps
fi

################################################################################
#                                 Git Stuff                                    #
################################################################################

function gitConfig() {
  configname="$1"
  configval="$2"
  previous="`git config --get $configname`"

  if [ -z "$previous" ]
  then
    git config --global "$configname" "$configval"
    echo "  $configname set."
  else
    echo "  $configname is already set to $previous."
  fi
}

function gitSetup() {
  echo "Git:"

  if [ `command -v git` ]
  then
    if [ "$name" == "" ]
    then
      read -p "What is your full name? " name
    fi
    if [ "$email" == "" ]
    then
      read -p "What is your email address? " email
    fi

    gitConfig "user.name" "$name"
    gitConfig "user.email" "$email"
    gitConfig "color.ui" "auto"
    gitConfig "format.suffix" ".txt"
    gitConfig "alias.wdiff" "diff --color-words"
    gitConfig "push.default" "simple"
    gitConfig "gitflow.multi-hotfix" "true"
    gitConfig "gitflow.feature.finish.no-ff" "true"

    ### Hub ###
    if [ ! -d "../../hub" ]
    then
      pushd ../..
      /usr/bin/git clone git@github.com:github/hub.git
      cd hub
      ./script/build
      popd
      ln -s ../../hub/hub ../hub
    fi

    ### Git Flow ###
    flowdir="/mnt/data/code/misc-github"
    if [ ! -d "$flowdir" ]
    then
      mkdir -p "$flowdir"
      cd "$flowdir"
      git clone https://github.com/petervanderdoes/gitflow.git
      cd gitflow
      make
    fi
  else
    echo "  Error: git not installed! Skipping.."
  fi
}

if [ "$nogit" == "1" ]
then
  echo "Skipping Git config at user's request."
else
  gitSetup
fi

################################################################################
#                                 GRUB Stuff                                   #
################################################################################
function backlightFix() {
  # Fix backlight controls
  config="/etc/default/grub"
  optionname='GRUB_CMDLINE_LINUX="'
  contents="quiet splash acpi_osi=Linux acpi_backlight=vendor"
  line="${optionname}${contents}\""
  grubcmd=`cat "$config" | grep "$line"`

  echo "GRUB:"

  if [ -z "$grubcmd" ]
  then
    read -p "  Permission required to modify $config, continue? [Y/n] " response
    if [ -z "$response" ] || [ "$response" == "Y" ] || [ "$response" == "y" ]
    then
      sudo sed --in-place s:"$optionname":\&"$contents": /etc/default/grub
      echo "  Backlight stuff added to $config"
    else
      echo "  Skipping backlight stuff."
    fi
  else
    echo "  GRUB_CMDLINE_LINUX already set."
  fi
}

if [ "$nobacklight" == "1" ]
then
  echo "Skipping backlight fix at user's request."
else
  backlightFix
fi
