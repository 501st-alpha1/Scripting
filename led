#!/bin/bash
# Wrapper script for Ledger-CLI.
# Copyright (C) 2018-2019 Scott Weldon

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

basedir="$(pwd)"

if [ -f "$basedir/led.conf" ]
then
  validArgs=('disable_payee_check' 'net_excludes' 'fakenet_extra_excludes'
             'sync_base_folder' 'sync_names' 'sync_folders' 'sync_accounts'
             'sync_fids' 'date')
  source loadconf "$basedir" "led.conf" validArgs[@]
fi

# TODO: Make this configurable.
ledger="$basedir/main.ledger"
ofxconfig="$basedir/ofxclient.ini"

args=('--file' "$ledger" '--strict' '--explicit')

if [ "$disable_payee_check" != 1 ]
then
  args+=('--check-payees')
fi

function make_net() {
  # TODO: Make included accounts configurable?
  args+=('balance' '(^Assets' '^Liabilities)' 'and' 'not' 'budget')

  for exclude in "${net_excludes[@]}"
  do
    args+=('and' 'not' "$exclude")
  done
}

if [ "$1" == "net" ]
then
  shift

  make_net
elif [ "$1" == 'fakenet' ]
then
  shift

  make_net

  for exclude in "${fakenet_extra_excludes[@]}"
  do
    args+=('and' 'not' "$exclude")
  done
elif [ "$1" == 'watch' ]
then
  shift
  # TODO: Allow customizing this.
  fileext='ledger'
  finished=0
  inotifywait --monitor --quiet --event close_write *.$fileext | while
      # If last run finished less than 1 second ago, then skip.
      if [ $(expr $(date +%s) - $finished) -gt 1 ]
      then
        [ "$date" == "1" ] && date
        led "$@"
      fi
      finished=$(date +%s)
      read event
    do :; done # No-op
elif [ "$1" == 'dedup' ]
then
  shift
  if [ $# -eq 0 ]
  then
    tag=ofxid
    echo 'No argument given, assuming `ofxid` tag.'
  else
    tag="$1"
    shift
  fi

  output=$(PAGER='' ledger "${args[@]}" tags --values "$@" | grep "$tag" | sort | uniq -d)
  if [ "$output" == '' ]
  then
    echo "Success!  No duplicate '$tag' tags."
    exit 0
  else
    echo "Error: duplicate '$tag' tags found:"
    echo $output
  fi
elif [ "$1" == 'reconcile' ]
then
  shift

  if [ "$1" != "" ]
  then
    account="$1"
  else
    echo 'Error: Account not given.'
    exit 1
  fi

  subaccounts=$(ledger "${args[@]}" accounts "$account" | wc -l)

  if [ $subaccounts -gt 1 ]
  then
    echo 'Account has multiple sub accounts:'
    PAGER='' ledger "${args[@]}" accounts "$account"
    echo 'Not implemented.'
    exit 3
  fi

  args+=('balance' '--format' '%(display_amount) %(quantity(display_amount))' "$account")

  result=$(ledger "${args[@]}")

  read -r amount quantity <<< "$result"

  read -p "For account $account, is the current balance $amount? [y/N] " answer

  if [ "$answer" == 'y' ]
  then
    echo 'Successfully reconciled!  You may append the following to your Ledgerfile:'
    # TODO: Auto-align to 80 chars.
    cat <<EOF
$(date +%Y/%m/%d) * Assertions
    $account           0 = $amount
EOF
  else
    read -p "What is the current balance for $account? " actualAmount
    difference=$(awk "BEGIN{print $quantity - $actualAmount}")
    echo "Ledger is off by $difference."
    read -p 'Create an adjustment transaction? [y/N] ' answer
    if [ "$answer" == 'y' ]
    then
      symbol='$' # TODO: allow customizing this.
      echo 'You may append the following to your Ledgerfile:'
      if [ $(echo "$difference > 0" | bc) -eq 1 ]
      then
        cat <<EOF
$(date +%Y/%m/%d) * Adjustment
    Income:Previous                                                       $symbol-$difference
    $account                  $symbol$difference = $amount
EOF
      else
        cat <<EOF
$(date +%Y/%m/%d) * Adjustment
    $account                  $symbol$difference = $amount
    Expenses:Previous                                                      $symbol${difference#-}
EOF
      fi
    else
      echo 'Please fix issues and try again.'
      exit 2
    fi
  fi

  exit 0
elif [ "$1" == 'sync' ]
then
  shift

  args=('--ofxconfig' "$ofxconfig" '--ledger' "$ledger"
        '--unknown-account' 'Expenses:Unknown')

  # Check if next arg is sync name.
  found=0
  for (( i=0; i < "${#sync_names[@]}"; i++ ))
  do
    if [ "${sync_names[$i]}" == "$1" ]
    then
      folder="${sync_folders[$i]}"
      account="${sync_accounts[$i]}"
      fid="${sync_fids[$i]}"
      found=1
    fi
  done
  if [ $found -eq 1 ]
  then
    shift

    path="$sync_base_folder/$folder"

    # Check if next arg is a year.
    if [ "$(date --date $1/1/1 +%Y 2>/dev/null)" == "$1" ]
    then
      path="$path/$1"
      shift
    fi

    filename="$path/$1"
    shift

    args+=('--account' "$account")

    if [ "$fid" != '' ]
    then
      args+=('--fid' "$fid")
    fi

    args+=("$filename")
  fi

  [ "$date" == "1" ] && date
  ledger-autosync "${args[@]}" "$@"

  exit $?
fi

[ "$date" == "1" ] && date
PAGER='' ledger "${args[@]}" "$@"
